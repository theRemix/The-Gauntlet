// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var io_colyseus_serializer_schema_Decoder = function() {
};
io_colyseus_serializer_schema_Decoder.__name__ = "io.colyseus.serializer.schema.Decoder";
io_colyseus_serializer_schema_Decoder.prototype = {
	decodePrimitiveType: function(type,bytes,it) {
		switch(type) {
		case "boolean":
			return this.boolean(bytes,it);
		case "float32":
			return this.float32(bytes,it);
		case "float64":
			return this.float64(bytes,it);
		case "int16":
			return this.int16(bytes,it);
		case "int32":
			return this.int32(bytes,it);
		case "int64":
			return this.int64(bytes,it);
		case "int8":
			return this.int8(bytes,it);
		case "number":
			return this.number(bytes,it);
		case "string":
			return this.string(bytes,it);
		case "uint16":
			return this.uint16(bytes,it);
		case "uint32":
			return this.uint32(bytes,it);
		case "uint64":
			return this.uint64(bytes,it);
		case "uint8":
			return this.uint8(bytes,it);
		default:
			throw new js__$Boot_HaxeError("can't decode: " + type);
		}
	}
	,string: function(bytes,it) {
		var prefix = bytes.b[it.offset++];
		var length = 0;
		if(prefix < 192) {
			length = prefix & 31;
		} else if(prefix == 217) {
			length = this.uint8(bytes,it);
		} else if(prefix == 218) {
			length = this.uint16(bytes,it);
		} else if(prefix == 219) {
			length = this.uint32(bytes,it);
		}
		var value = bytes.getString(it.offset,length);
		it.offset += length;
		return value;
	}
	,number: function(bytes,it) {
		var prefix = bytes.b[it.offset++];
		if(prefix < 128) {
			return prefix;
		} else if(prefix == 202) {
			return this.float32(bytes,it);
		} else if(prefix == 203) {
			return this.float64(bytes,it);
		} else if(prefix == 204) {
			return this.uint8(bytes,it);
		} else if(prefix == 205) {
			return this.uint16(bytes,it);
		} else if(prefix == 206) {
			return this.uint32(bytes,it);
		} else if(prefix == 207) {
			return this.uint64(bytes,it);
		} else if(prefix == 208) {
			return this.int8(bytes,it);
		} else if(prefix == 209) {
			return this.int16(bytes,it);
		} else if(prefix == 210) {
			return this.int32(bytes,it);
		} else if(prefix == 211) {
			return this.int64(bytes,it);
		} else if(prefix > 223) {
			return (255 - prefix + 1) * -1;
		}
		return 0;
	}
	,boolean: function(bytes,it) {
		return this.uint8(bytes,it) > 0;
	}
	,int8: function(bytes,it) {
		return this.uint8(bytes,it) << 24 >> 24;
	}
	,uint8: function(bytes,it) {
		return bytes.b[it.offset++];
	}
	,int16: function(bytes,it) {
		return this.uint16(bytes,it) << 16 >> 16;
	}
	,uint16: function(bytes,it) {
		return bytes.b[it.offset++] | bytes.b[it.offset++] << 8;
	}
	,int32: function(bytes,it) {
		var value = bytes.getInt32(it.offset);
		it.offset += 4;
		return value;
	}
	,uint32: function(bytes,it) {
		return this.int32(bytes,it) >>> 0;
	}
	,int64: function(bytes,it) {
		var value = bytes.getInt64(it.offset);
		it.offset += 8;
		return value;
	}
	,uint64: function(bytes,it) {
		var low = this.uint32(bytes,it);
		var high = this.uint32(bytes,it) * Math.pow(2,32);
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	,float32: function(bytes,it) {
		var value = bytes.getFloat(it.offset);
		it.offset += 4;
		return value;
	}
	,float64: function(bytes,it) {
		var value = bytes.getDouble(it.offset);
		it.offset += 8;
		return value;
	}
	,__class__: io_colyseus_serializer_schema_Decoder
};
var io_colyseus_serializer_schema_Schema = function() {
	this._childPrimitiveTypes = new haxe_ds_IntMap();
	this._childSchemaTypes = new haxe_ds_IntMap();
	this._types = new haxe_ds_IntMap();
	this._indexes = new haxe_ds_IntMap();
};
io_colyseus_serializer_schema_Schema.__name__ = "io.colyseus.serializer.schema.Schema";
io_colyseus_serializer_schema_Schema.prototype = {
	onChange: function(changes) {
	}
	,onRemove: function() {
	}
	,decode: function(bytes,it) {
		var changes = [];
		if(it == null) {
			it = { offset : 0};
		}
		var totalBytes = bytes.length;
		while(it.offset < totalBytes) {
			var isNil = io_colyseus_serializer_schema_SPEC.nilCheck(bytes,it);
			if(isNil) {
				it.offset++;
			}
			var index = bytes.b[it.offset++];
			if(index == io_colyseus_serializer_schema_SPEC.END_OF_STRUCTURE) {
				break;
			}
			var field = this._indexes.h[index];
			var type = this._types.h[index];
			var value = null;
			var hasChange = false;
			if(field == null) {
				continue;
			} else if(isNil) {
				value = null;
				hasChange = true;
			} else if(type == "ref") {
				var constructor = this._childSchemaTypes.h[index];
				value = Reflect.getProperty(this,field);
				if(value == null) {
					value = Type.createInstance(constructor,[]);
				}
				value.decode(bytes,it);
				hasChange = true;
			} else if(type == "array") {
				var isSchemaType = this._childSchemaTypes.h.hasOwnProperty(index);
				type = isSchemaType ? this._childSchemaTypes.h[index] : this._childPrimitiveTypes.h[index];
				var valueRef = Reflect.getProperty(this,field);
				if(valueRef == null) {
					valueRef = new io_colyseus_serializer_schema_ArraySchema_$Dynamic();
				}
				value = valueRef.clone();
				var newLength = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
				var numChanges = js_Boot.__cast(Math.min(io_colyseus_serializer_schema_Schema.decoder.number(bytes,it),newLength) , Int);
				var hasRemoval = value.items.length > newLength;
				hasChange = numChanges > 0 || hasRemoval;
				var hasIndexChange = false;
				if(hasRemoval) {
					var items = js_Boot.__cast(valueRef.items , Array);
					var _g = newLength;
					var _g1 = valueRef.items.length;
					while(_g < _g1) {
						var i = _g++;
						var itemRemoved = items[i];
						if(isSchemaType && itemRemoved.onRemove != null) {
							itemRemoved.onRemove();
						}
						HxOverrides.remove(js_Boot.__cast(value.items , Array),itemRemoved);
						valueRef.onRemove(itemRemoved,newLength + i);
					}
				}
				var _g2 = 0;
				var _g11 = numChanges;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var newIndex = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
					var indexChangedFrom = -1;
					if(io_colyseus_serializer_schema_SPEC.indexChangeCheck(bytes,it)) {
						it.offset++;
						indexChangedFrom = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
						hasIndexChange = true;
					}
					var isNew = !hasIndexChange && value.items[newIndex] == null || hasIndexChange && indexChangedFrom == -1;
					if(isSchemaType) {
						var item = null;
						if(isNew) {
							item = Type.createInstance(type,[]);
						} else if(indexChangedFrom != -1) {
							item = valueRef.items[indexChangedFrom];
						} else {
							item = valueRef.items[newIndex];
						}
						if(item == null) {
							item = Type.createInstance(type,[]);
							isNew = true;
						}
						item.decode(bytes,it);
						value.items[newIndex] = item;
					} else {
						value.items[newIndex] = io_colyseus_serializer_schema_Schema.decoder.decodePrimitiveType(type,bytes,it);
					}
					if(isNew) {
						valueRef.onAdd(value.items[newIndex],newIndex);
					} else {
						valueRef.onChange(value.items[newIndex],newIndex);
					}
				}
			} else if(type == "map") {
				var isSchemaType1 = this._childSchemaTypes.h.hasOwnProperty(index);
				type = isSchemaType1 ? this._childSchemaTypes.h[index] : this._childPrimitiveTypes.h[index];
				var valueRef1 = Reflect.getProperty(this,field);
				if(valueRef1 == null) {
					valueRef1 = new io_colyseus_serializer_schema_MapSchema_$Dynamic();
				}
				value = valueRef1.clone();
				var length = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
				hasChange = length > 0;
				var hasIndexChange1 = false;
				var previousKeys = [];
				var keysIterator = valueRef1.items.keys();
				while(keysIterator.hasNext()) previousKeys.push(keysIterator.next());
				var _g3 = 0;
				var _g12 = length;
				while(_g3 < _g12) {
					var i2 = _g3++;
					if(it.offset >= bytes.length || bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.END_OF_STRUCTURE) {
						break;
					}
					var isNilItem = io_colyseus_serializer_schema_SPEC.nilCheck(bytes,it);
					if(isNilItem) {
						it.offset++;
					}
					var previousKey = "";
					if(io_colyseus_serializer_schema_SPEC.indexChangeCheck(bytes,it)) {
						it.offset++;
						previousKey = previousKeys[io_colyseus_serializer_schema_Schema.decoder.number(bytes,it)];
						hasIndexChange1 = true;
					}
					var hasMapIndex = io_colyseus_serializer_schema_SPEC.numberCheck(bytes,it);
					var newKey = hasMapIndex ? previousKeys[io_colyseus_serializer_schema_Schema.decoder.number(bytes,it)] : io_colyseus_serializer_schema_Schema.decoder.string(bytes,it);
					var item1;
					var isNew1 = !hasIndexChange1 && !valueRef1.items.exists(newKey) || hasIndexChange1 && previousKey == "" && hasMapIndex;
					if(isNew1 && isSchemaType1) {
						item1 = Type.createInstance(type,[]);
					} else if(previousKey != "") {
						item1 = valueRef1.items.get(previousKey);
					} else {
						item1 = valueRef1.items.get(newKey);
					}
					if(isNilItem) {
						if(item1 && isSchemaType1 && item1.onRemove != null) {
							item1.onRemove();
						}
						valueRef1.onRemove(item1,newKey);
						value.items.remove(newKey);
						continue;
					} else if(!isSchemaType1) {
						var decodedValue = io_colyseus_serializer_schema_Schema.decoder.decodePrimitiveType(type,bytes,it);
						value.items.set(newKey,decodedValue);
					} else {
						item1.decode(bytes,it);
						value.items.set(newKey,item1);
					}
					if(isNew1) {
						valueRef1.onAdd(item1,newKey);
					} else {
						valueRef1.onChange(item1,newKey);
					}
				}
			} else {
				value = io_colyseus_serializer_schema_Schema.decoder.decodePrimitiveType(type,bytes,it);
				hasChange = true;
			}
			if(hasChange) {
				changes.push({ field : field, value : value, previousValue : Reflect.getProperty(this,field)});
			}
			this[field] = value;
		}
		if(changes.length > 0) {
			this.onChange(changes);
		}
	}
	,toString: function() {
		var data = [];
		var field = this._indexes.iterator();
		while(field.hasNext()) {
			var field1 = field.next();
			data.push(field1 + " => " + Std.string(Reflect.getProperty(this,field1)));
		}
		return "{ " + data.join(", ") + " }";
	}
	,__class__: io_colyseus_serializer_schema_Schema
};
var GState = function() {
	this.dummy = 0;
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "dummy";
	this._types.h[0] = "number";
};
GState.__name__ = "GState";
GState.__super__ = io_colyseus_serializer_schema_Schema;
GState.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	__class__: GState
});
var GMain = function() {
	window.document.addEventListener("DOMContentLoaded",$bind(this,this.init));
	this.client = new io_colyseus_Client("ws://" + window.location.host);
	this.client.joinOrCreate_GState("room_controller",new haxe_ds_StringMap(),GState,$bind(this,this.onRoomJoinOrCreate));
};
GMain.__name__ = "GMain";
GMain.main = function() {
	new GMain();
};
GMain.createPlayerTableRow = function(room,table,player) {
	var row = window.document.createElement("tr");
	var key = window.document.createElement("td");
	var alias = window.document.createElement("td");
	var stats = window.document.createElement("td");
	var dc = window.document.createElement("td");
	row.className = "player_row";
	key.className = "player_key";
	key.innerText = player.key;
	alias.innerText = player.alias;
	if(player.alias != "GM") {
		stats.innerHTML = "hacking:" + (player.hacking == null ? "null" : "" + player.hacking) + "<br>sysops:" + (player.sysops == null ? "null" : "" + player.sysops) + "<br>skullduggery:" + (player.skullduggery == null ? "null" : "" + player.skullduggery) + "<br>int:" + (player.intellect == null ? "null" : "" + player.intellect);
	}
	var dcBtn = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
	dcBtn.type = "button";
	dcBtn.innerText = "Kick";
	dcBtn.onclick = function(_) {
		room.send("kick",player.key);
	};
	dc.append(dcBtn);
	row.append(key,alias,stats,dc);
	table.appendChild(row);
};
GMain.createServerTableRow = function(room,table,server) {
	var row = window.document.createElement("tr");
	var name = window.document.createElement("td");
	var owned = window.document.createElement("td");
	var ownedBy = window.document.createElement("td");
	var close = window.document.createElement("td");
	var open = window.document.createElement("td");
	row.className = "server_row";
	name.className = "server_key";
	name.innerText = server.name;
	owned.innerText = server.owned == null ? "null" : "" + server.owned;
	owned.id = "server_row_owned_" + StringTools.replace(server.name," ","_");
	ownedBy.innerText = server.ownedBy;
	ownedBy.id = "server_row_ownedBy_" + StringTools.replace(server.name," ","_");
	var ownBtn = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
	ownBtn.type = "button";
	ownBtn.innerText = "Own";
	ownBtn.onclick = function(_) {
		room.send("gmOwn",server.name);
	};
	open.append(ownBtn);
	var rstBtn = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
	rstBtn.type = "button";
	rstBtn.innerText = "Reset";
	rstBtn.onclick = function(_1) {
		room.send("gmReset",server.name);
	};
	close.append(rstBtn);
	row.append(name,owned,ownedBy,close,open);
	table.appendChild(row);
};
GMain.prototype = {
	init: function(_) {
		this.servers_container = window.document.getElementById("servers_container");
		this.server_address = window.document.getElementById("server_address");
		this.players_container = window.document.getElementById("players_container");
		this.players_table_container = window.document.getElementById("players_table_container");
		this.players_table = window.document.getElementById("players_table");
		this.controls_container = window.document.getElementById("controls_container");
		this.status = window.document.getElementById("status");
		this.server_address_input = js_Boot.__cast(window.document.getElementById("server_address_input") , HTMLInputElement);
		this.create_server_form = js_Boot.__cast(window.document.getElementById("create_server_form") , HTMLFormElement);
		this.sim_running = js_Boot.__cast(window.document.getElementById("sim_running") , HTMLInputElement);
		this.sim_pause_dim = js_Boot.__cast(window.document.getElementById("sim_pause_dim") , HTMLInputElement);
		this.sim_pause_dark = js_Boot.__cast(window.document.getElementById("sim_pause_dark") , HTMLInputElement);
		this.cur_scene = js_Boot.__cast(window.document.getElementById("cur_scene") , HTMLSelectElement);
		this.scene_tut1_controls = window.document.getElementById("scene_tut1_controls");
		this.scene_tut1_control_inputs = [js_Boot.__cast(window.document.getElementById("scene_tut1_controls_1") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut1_controls_2") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut1_controls_3") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut1_controls_4") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut1_controls_5") , HTMLInputElement)];
		this.scene_tut2_controls = window.document.getElementById("scene_tut2_controls");
		this.scene_tut2_control_inputs = [js_Boot.__cast(window.document.getElementById("scene_tut2_controls_1") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut2_controls_2") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut2_controls_3") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut2_controls_4") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut2_controls_5") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut2_controls_6") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut2_controls_7") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut2_controls_8") , HTMLInputElement)];
		this.scene_tut3_controls = window.document.getElementById("scene_tut3_controls");
		this.scene_tut3_control_inputs = [js_Boot.__cast(window.document.getElementById("scene_tut3_controls_1") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut3_controls_2") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut3_controls_3") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut3_controls_4") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut3_controls_5") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut3_controls_6") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut3_controls_7") , HTMLInputElement),js_Boot.__cast(window.document.getElementById("scene_tut3_controls_8") , HTMLInputElement)];
		this.current_timer = window.document.getElementById("current_timer");
		this.scene_sim_base_controls = window.document.getElementById("scene_sim_base_controls");
		this.timer_form = js_Boot.__cast(window.document.getElementById("timer_form") , HTMLFormElement);
		this.timer_seconds_input = js_Boot.__cast(window.document.getElementById("timer_seconds_input") , HTMLInputElement);
		this.fw_up = js_Boot.__cast(window.document.getElementById("fw_up") , HTMLInputElement);
		this.fw_down = js_Boot.__cast(window.document.getElementById("fw_down") , HTMLInputElement);
		this.servers_table_practice = window.document.getElementById("servers_table_practice");
		this.servers_table_real = window.document.getElementById("servers_table_real");
		this.server_address.hidden = this.servers_container.hidden = this.players_container.hidden = this.controls_container.hidden = this.scene_tut1_controls.hidden = this.scene_tut2_controls.hidden = this.scene_tut3_controls.hidden = this.scene_sim_base_controls.hidden = true;
		this.status.innerText = "📡 Connecting to Room Controller";
	}
	,onRoomJoinOrCreate: function(err,room) {
		var _gthis = this;
		if(err != null) {
			this.status.innerText = err.message;
			console.log("src/GMain.hx:155:","JOIN ERROR: " + Std.string(err));
			return;
		}
		this.servers_container.hidden = false;
		this.create_server_form.reset();
		this.status.innerText = "✅ Connected to Room Controller!";
		this.server_address_input.onchange = function(e) {
			_gthis.server_address.innerText = e.currentTarget.value.trim();
		};
		this.create_server_form.onsubmit = function(e1) {
			e1.preventDefault();
			if(_gthis.server_address.innerText.length == 0) {
				_gthis.status.innerText = "❌ You must enter a server address";
				e1.currentTarget.reset();
				return;
			}
			_gthis.status.innerText = "👷 Creating Server";
			room.send("createServer",_gthis.server_address_input.value);
		};
		room.onMessage("SERVER_CREATED",function(address) {
			_gthis.server_address.innerText = address;
			_gthis.server_address_input.hidden = true;
			_gthis.create_server_form.hidden = true;
			_gthis.status.innerText = "Server \"" + address + "\" Created";
			_gthis.switchToCreatedServer();
		});
	}
	,switchToCreatedServer: function() {
		this.status.innerText = "🖧  Connecting to Game State room";
		this.client.joinOrCreate_State(this.server_address.innerText,new haxe_ds_StringMap(),State,$bind(this,this.onGameJoinOrCreate));
	}
	,onGameJoinOrCreate: function(err,room) {
		var _gthis = this;
		if(err != null) {
			this.status.innerText = err.message;
			console.log("src/GMain.hx:204:","JOIN ERROR: " + Std.string(err));
			return;
		}
		this.players_container.hidden = false;
		this.controls_container.hidden = false;
		this.server_address.hidden = false;
		this.status.innerText = "✅ Connected to Game State room!";
		var updatePlayerList = function(player,key) {
			var rows = _gthis.players_table.getElementsByClassName("player_row");
			var _g = 0;
			while(_g < rows.length) {
				var row = rows[_g];
				++_g;
				_gthis.players_table.removeChild(row);
			}
			var player1 = room.get_state().players.items.iterator();
			while(player1.hasNext()) {
				var player2 = player1.next();
				var room1 = [room];
				var table = _gthis.players_table;
				var player3 = [player2];
				var row1 = window.document.createElement("tr");
				var key1 = window.document.createElement("td");
				var alias = window.document.createElement("td");
				var stats = window.document.createElement("td");
				var dc = window.document.createElement("td");
				row1.className = "player_row";
				key1.className = "player_key";
				key1.innerText = player3[0].key;
				alias.innerText = player3[0].alias;
				if(player3[0].alias != "GM") {
					stats.innerHTML = "hacking:" + Std.string(player3[0].hacking) + "<br>sysops:" + Std.string(player3[0].sysops) + "<br>skullduggery:" + Std.string(player3[0].skullduggery) + "<br>int:" + Std.string(player3[0].intellect);
				}
				var dcBtn = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
				dcBtn.type = "button";
				dcBtn.innerText = "Kick";
				dcBtn.onclick = (function(player4,room2) {
					return function(_) {
						room2[0].send("kick",player4[0].key);
					};
				})(player3,room1);
				dc.append(dcBtn);
				row1.append(key1,alias,stats,dc);
				table.appendChild(row1);
			}
		};
		room.get_state().players.onChange = updatePlayerList;
		var removePlayerList = function(player5,key2) {
			var rows1 = _gthis.players_table.getElementsByClassName("player_row");
			var _g1 = 0;
			while(_g1 < rows1.length) {
				var row2 = rows1[_g1];
				++_g1;
				var keyCols = row2.getElementsByClassName("player_key");
				var _g2 = 0;
				while(_g2 < keyCols.length) {
					var keyCol = keyCols[_g2];
					++_g2;
					if(keyCol.innerText == key2) {
						_gthis.players_table.removeChild(row2);
					}
				}
			}
		};
		room.get_state().players.onRemove = removePlayerList;
		var serverTablePopulated = false;
		var roomOnChange = function(changes) {
			var _g3 = 0;
			while(_g3 < changes.length) {
				var change = changes[_g3];
				++_g3;
				switch(change.field) {
				case "practiceNet":case "realNet":
					console.log("src/GMain.hx:243:",changes);
					if(!serverTablePopulated) {
						var s = room.get_state().practiceNet.iterator();
						while(s.hasNext()) {
							var s1 = s.next();
							var room3 = [room];
							var table1 = _gthis.servers_table_practice;
							var server = [s1];
							var row3 = window.document.createElement("tr");
							var name = window.document.createElement("td");
							var owned = window.document.createElement("td");
							var ownedBy = window.document.createElement("td");
							var close = window.document.createElement("td");
							var open = window.document.createElement("td");
							row3.className = "server_row";
							name.className = "server_key";
							name.innerText = server[0].name;
							owned.innerText = Std.string(server[0].owned);
							owned.id = "server_row_owned_" + StringTools.replace(server[0].name," ","_");
							ownedBy.innerText = server[0].ownedBy;
							ownedBy.id = "server_row_ownedBy_" + StringTools.replace(server[0].name," ","_");
							var ownBtn = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
							ownBtn.type = "button";
							ownBtn.innerText = "Own";
							ownBtn.onclick = (function(server1,room4) {
								return function(_1) {
									room4[0].send("gmOwn",server1[0].name);
								};
							})(server,room3);
							open.append(ownBtn);
							var rstBtn = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
							rstBtn.type = "button";
							rstBtn.innerText = "Reset";
							rstBtn.onclick = (function(server2,room5) {
								return function(_2) {
									room5[0].send("gmReset",server2[0].name);
								};
							})(server,room3);
							close.append(rstBtn);
							row3.append(name,owned,ownedBy,close,open);
							table1.appendChild(row3);
						}
						var s2 = room.get_state().realNet.iterator();
						while(s2.hasNext()) {
							var s3 = s2.next();
							var room6 = [room];
							var table2 = _gthis.servers_table_real;
							var server3 = [s3];
							var row4 = window.document.createElement("tr");
							var name1 = window.document.createElement("td");
							var owned1 = window.document.createElement("td");
							var ownedBy1 = window.document.createElement("td");
							var close1 = window.document.createElement("td");
							var open1 = window.document.createElement("td");
							row4.className = "server_row";
							name1.className = "server_key";
							name1.innerText = server3[0].name;
							owned1.innerText = Std.string(server3[0].owned);
							owned1.id = "server_row_owned_" + StringTools.replace(server3[0].name," ","_");
							ownedBy1.innerText = server3[0].ownedBy;
							ownedBy1.id = "server_row_ownedBy_" + StringTools.replace(server3[0].name," ","_");
							var ownBtn1 = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
							ownBtn1.type = "button";
							ownBtn1.innerText = "Own";
							ownBtn1.onclick = (function(server4,room7) {
								return function(_3) {
									room7[0].send("gmOwn",server4[0].name);
								};
							})(server3,room6);
							open1.append(ownBtn1);
							var rstBtn1 = js_Boot.__cast(window.document.createElement("button") , HTMLButtonElement);
							rstBtn1.type = "button";
							rstBtn1.innerText = "Reset";
							rstBtn1.onclick = (function(server5,room8) {
								return function(_4) {
									room8[0].send("gmReset",server5[0].name);
								};
							})(server3,room6);
							close1.append(rstBtn1);
							row4.append(name1,owned1,ownedBy1,close1,open1);
							table2.appendChild(row4);
						}
						serverTablePopulated = true;
					} else {
						var net = change.value;
						var _g4 = 0;
						var _g11 = net.items;
						while(_g4 < _g11.length) {
							var s4 = _g11[_g4];
							++_g4;
							var owned2 = window.document.getElementById("server_row_owned_" + StringTools.replace(s4.name," ","_"));
							var ownedBy2 = window.document.getElementById("server_row_ownedBy_" + StringTools.replace(s4.name," ","_"));
							if(owned2 != null) {
								owned2.innerText = s4.owned == null ? "null" : "" + s4.owned;
							} else {
								console.log("src/GMain.hx:259:","WARN! el is null: server_row_owned_" + StringTools.replace(s4.name," ","_"));
							}
							if(ownedBy2 != null) {
								ownedBy2.innerText = s4.ownedBy;
							} else {
								console.log("src/GMain.hx:262:","WARN! el is null: server_row_ownedBy_" + StringTools.replace(s4.name," ","_"));
							}
						}
					}
					break;
				case "timer":
					_gthis.current_timer.innerText = change.value;
					break;
				}
			}
		};
		room.get_state().onChange = roomOnChange;
		this.sim_running.onclick = function(_5) {
			room.send("unpause");
		};
		this.sim_pause_dim.onclick = function(_6) {
			room.send("pause","dim");
		};
		this.sim_pause_dark.onclick = function(_7) {
			room.send("pause","dark");
		};
		this.fw_up.onclick = function(_8) {
			room.send("enableFirewalls");
		};
		this.fw_down.onclick = function(_9) {
			room.send("disableFirewalls");
		};
		this.cur_scene.onchange = function(e) {
			room.send("setScene",e.target.value);
			switch(e.target.value) {
			case "Lobby":
				_gthis.scene_tut1_controls.hidden = _gthis.scene_tut2_controls.hidden = _gthis.scene_tut3_controls.hidden = _gthis.scene_sim_base_controls.hidden = true;
				break;
			case "Practice":
				_gthis.scene_tut1_controls.hidden = _gthis.scene_tut2_controls.hidden = _gthis.scene_tut3_controls.hidden = true;
				_gthis.scene_sim_base_controls.hidden = false;
				break;
			case "RealNet":
				_gthis.scene_tut1_controls.hidden = _gthis.scene_tut2_controls.hidden = _gthis.scene_tut3_controls.hidden = true;
				_gthis.scene_sim_base_controls.hidden = false;
				break;
			case "Tut1":
				_gthis.scene_tut2_controls.hidden = _gthis.scene_tut3_controls.hidden = _gthis.scene_sim_base_controls.hidden = true;
				_gthis.scene_tut1_controls.hidden = false;
				break;
			case "Tut2":
				_gthis.scene_tut1_controls.hidden = _gthis.scene_tut3_controls.hidden = _gthis.scene_sim_base_controls.hidden = true;
				_gthis.scene_tut2_controls.hidden = false;
				break;
			case "Tut3":
				_gthis.scene_tut1_controls.hidden = _gthis.scene_tut2_controls.hidden = _gthis.scene_sim_base_controls.hidden = true;
				_gthis.scene_tut3_controls.hidden = false;
				break;
			}
			var _g12 = 0;
			var _g21 = _gthis.scene_tut1_control_inputs;
			while(_g12 < _g21.length) {
				var i = _g21[_g12];
				++_g12;
				i.checked = false;
			}
			var _g31 = 0;
			var _g41 = _gthis.scene_tut2_control_inputs;
			while(_g31 < _g41.length) {
				var i1 = _g41[_g31];
				++_g31;
				i1.checked = false;
			}
			var _g5 = 0;
			var _g6 = _gthis.scene_tut3_control_inputs;
			while(_g5 < _g6.length) {
				var i2 = _g6[_g5];
				++_g5;
				i2.checked = false;
			}
		};
		var _g7 = 0;
		var _g13 = this.scene_tut1_control_inputs.length;
		while(_g7 < _g13) {
			var i3 = [_g7++];
			this.scene_tut1_control_inputs[i3[0]].onchange = (function(i4) {
				return function(e1) {
					var _g8 = new haxe_ds_StringMap();
					if(__map_reserved["step"] != null) {
						_g8.setReserved("step",i4[0]);
					} else {
						_g8.h["step"] = i4[0];
					}
					var value = e1.target.checked;
					if(__map_reserved["value"] != null) {
						_g8.setReserved("value",value);
					} else {
						_g8.h["value"] = value;
					}
					room.send("setTutStep",_g8);
				};
			})(i3);
		}
		var _g22 = 0;
		var _g32 = this.scene_tut2_control_inputs.length;
		while(_g22 < _g32) {
			var i5 = [_g22++];
			this.scene_tut2_control_inputs[i5[0]].onchange = (function(i6) {
				return function(e2) {
					var _g23 = new haxe_ds_StringMap();
					if(__map_reserved["step"] != null) {
						_g23.setReserved("step",i6[0]);
					} else {
						_g23.h["step"] = i6[0];
					}
					var value1 = e2.target.checked;
					if(__map_reserved["value"] != null) {
						_g23.setReserved("value",value1);
					} else {
						_g23.h["value"] = value1;
					}
					room.send("setTutStep",_g23);
				};
			})(i5);
		}
		var _g42 = 0;
		var _g51 = this.scene_tut3_control_inputs.length;
		while(_g42 < _g51) {
			var i7 = [_g42++];
			this.scene_tut3_control_inputs[i7[0]].onchange = (function(i8) {
				return function(e3) {
					var _g43 = new haxe_ds_StringMap();
					if(__map_reserved["step"] != null) {
						_g43.setReserved("step",i8[0]);
					} else {
						_g43.h["step"] = i8[0];
					}
					var value2 = e3.target.checked;
					if(__map_reserved["value"] != null) {
						_g43.setReserved("value",value2);
					} else {
						_g43.h["value"] = value2;
					}
					room.send("setTutStep",_g43);
				};
			})(i7);
		}
		var secondsInput = "";
		this.timer_seconds_input.onchange = function(e4) {
			secondsInput = e4.currentTarget.value.trim();
		};
		this.timer_form.onsubmit = function(e5) {
			e5.preventDefault();
			if(secondsInput.length == 0) {
				_gthis.status.innerText = "❌ You must enter seconds";
				e5.currentTarget.reset();
				return;
			}
			var seconds = Std.parseInt(secondsInput);
			_gthis.status.innerText = "👷 Setting Timer to: " + seconds;
			room.send("setTimer",seconds);
		};
		window.onbeforeunload = function(_10) {
			room.leave();
			return null;
		};
	}
	,__class__: GMain
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Math.__name__ = "Math";
var Player = function() {
	this.alias = null;
	this.key = null;
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "key";
	this._types.h[0] = "string";
	this._indexes.h[1] = "alias";
	this._types.h[1] = "string";
	this._indexes.h[2] = "hacking";
	this._types.h[2] = "number";
	this._indexes.h[3] = "sysops";
	this._types.h[3] = "number";
	this._indexes.h[4] = "skullduggery";
	this._types.h[4] = "number";
	this._indexes.h[5] = "intellect";
	this._types.h[5] = "number";
};
Player.__name__ = "Player";
Player.__super__ = io_colyseus_serializer_schema_Schema;
Player.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	__class__: Player
});
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var State = function() {
	this.realNet = new io_colyseus_serializer_schema_ArraySchema_$SubSystem();
	this.practiceNet = new io_colyseus_serializer_schema_ArraySchema_$SubSystem();
	this.tutStep = new io_colyseus_serializer_schema_ArraySchema_$Bool();
	this.pauseOverlay = "";
	this.scene = "";
	this.gm = new Player();
	this.players = new io_colyseus_serializer_schema_MapSchema_$Player();
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "players";
	this._types.h[0] = "map";
	this._childSchemaTypes.h[0] = Player;
	this._indexes.h[1] = "gm";
	this._types.h[1] = "ref";
	this._childSchemaTypes.h[1] = Player;
	this._indexes.h[2] = "scene";
	this._types.h[2] = "string";
	this._indexes.h[3] = "pauseOverlay";
	this._types.h[3] = "string";
	this._indexes.h[4] = "tutStep";
	this._types.h[4] = "array";
	this._childPrimitiveTypes.h[4] = "boolean";
	this._indexes.h[5] = "practiceNet";
	this._types.h[5] = "array";
	this._childSchemaTypes.h[5] = SubSystem;
	this._indexes.h[6] = "realNet";
	this._types.h[6] = "array";
	this._childSchemaTypes.h[6] = SubSystem;
	this._indexes.h[7] = "timer";
	this._types.h[7] = "number";
	this._indexes.h[8] = "firewalls";
	this._types.h[8] = "boolean";
};
State.__name__ = "State";
State.__super__ = io_colyseus_serializer_schema_Schema;
State.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	__class__: State
});
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var SubSystem = function() {
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "name";
	this._types.h[0] = "string";
	this._indexes.h[1] = "x";
	this._types.h[1] = "number";
	this._indexes.h[2] = "y";
	this._types.h[2] = "number";
	this._indexes.h[3] = "keys";
	this._types.h[3] = "array";
	this._childPrimitiveTypes.h[3] = "string";
	this._indexes.h[4] = "owned";
	this._types.h[4] = "boolean";
	this._indexes.h[5] = "ownedBy";
	this._types.h[5] = "string";
	this._indexes.h[6] = "runners";
	this._types.h[6] = "array";
	this._childPrimitiveTypes.h[6] = "string";
};
SubSystem.__name__ = "SubSystem";
SubSystem.__super__ = io_colyseus_serializer_schema_Schema;
SubSystem.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	__class__: SubSystem
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	setHeader: function(name,value) {
		var _g = 0;
		var _g1 = this.headers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	,setPostData: function(data) {
		this.postData = data;
		this.postBytes = null;
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
	,__properties__: {get_responseData:"get_responseData"}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined") {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var onreadystatechange1 = haxe_io_Bytes.ofData(r.response);
				_gthis.success(onreadystatechange1);
			} else if(s == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postBytes;
		var _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				var bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			var str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g2 = 0;
			var _g3 = this.params;
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				if(uri == null) {
					uri = "";
				} else {
					uri = Std.string(uri) + "&";
				}
				var s1 = p.name;
				var value = Std.string(uri) + encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri = value + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + Std.string(uri),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			this.req = null;
			this.onError(e3.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g21 = 0;
		var _g31 = this.headers;
		while(_g21 < _g31.length) {
			var h1 = _g31[_g21];
			++_g21;
			r.setRequestHeader(h1.name,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeDouble: function(x) {
		var i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	,writeInt8: function(x) {
		if(x < -128 || x >= 128) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeByte(x & 255);
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_net_ReadyState = $hxEnums["haxe.net.ReadyState"] = { __ename__ : true, __constructs__ : ["Connecting","Open","Closing","Closed"]
	,Connecting: {_hx_index:0,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Open: {_hx_index:1,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Closing: {_hx_index:2,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Closed: {_hx_index:3,__enum__:"haxe.net.ReadyState",toString:$estr}
};
var haxe_net_WebSocket = function() {
};
haxe_net_WebSocket.__name__ = "haxe.net.WebSocket";
haxe_net_WebSocket.create = function(url,protocols,origin,debug) {
	if(debug == null) {
		debug = false;
	}
	return new haxe_net_impl_WebSocketJs(url,protocols);
};
haxe_net_WebSocket.defer = function(callback) {
	haxe_Timer.delay(callback,0);
};
haxe_net_WebSocket.prototype = {
	process: function() {
	}
	,sendString: function(message) {
	}
	,sendBytes: function(message) {
	}
	,close: function() {
	}
	,get_readyState: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,onopen: function() {
	}
	,onerror: function(message) {
	}
	,onmessageString: function(message) {
	}
	,onmessageBytes: function(message) {
	}
	,onclose: function() {
	}
	,__class__: haxe_net_WebSocket
	,__properties__: {get_readyState:"get_readyState"}
};
var haxe_net_impl_WebSocketJs = function(url,protocols) {
	var _gthis = this;
	haxe_net_WebSocket.call(this);
	if(protocols != null) {
		this.impl = new WebSocket(url,protocols);
	} else {
		this.impl = new WebSocket(url);
	}
	this.impl.onopen = function(e) {
		_gthis.onopen();
	};
	this.impl.onclose = function(e1) {
		_gthis.onclose();
	};
	this.impl.onerror = function(e2) {
		_gthis.onerror("error");
	};
	this.impl.onmessage = function(e3) {
		var m = e3.data;
		if(typeof(m) == "string") {
			_gthis.onmessageString(m);
		} else if(((m) instanceof ArrayBuffer)) {
			_gthis.onmessageBytes(haxe_io_Bytes.ofData(js_Boot.__cast(m , ArrayBuffer)));
		} else if(((m) instanceof Blob)) {
			var arrayBuffer;
			var fileReader = new FileReader();
			fileReader.onload = function() {
				arrayBuffer = fileReader.result;
				_gthis.onmessageBytes(haxe_io_Bytes.ofData(arrayBuffer));
			};
			fileReader.readAsArrayBuffer(js_Boot.__cast(m , Blob));
		} else {
			console.log("haxe/net/impl/WebSocketJs.hx:47:","Unhandled websocket onmessage " + m);
		}
	};
};
haxe_net_impl_WebSocketJs.__name__ = "haxe.net.impl.WebSocketJs";
haxe_net_impl_WebSocketJs.__super__ = haxe_net_WebSocket;
haxe_net_impl_WebSocketJs.prototype = $extend(haxe_net_WebSocket.prototype,{
	sendString: function(message) {
		this.impl.send(message);
	}
	,sendBytes: function(message) {
		message = message.sub(0,message.length);
		this.impl.send(message.b.bufferValue);
	}
	,close: function() {
		this.impl.close();
	}
	,get_readyState: function() {
		switch(this.impl.readyState) {
		case 0:
			return haxe_net_ReadyState.Connecting;
		case 1:
			return haxe_net_ReadyState.Open;
		case 2:
			return haxe_net_ReadyState.Closing;
		case 3:
			return haxe_net_ReadyState.Closed;
		default:
			throw new js__$Boot_HaxeError("Unexpected websocket state");
		}
	}
	,__class__: haxe_net_impl_WebSocketJs
});
var io_colyseus_Auth = function(endpoint) {
	this.endpoint = StringTools.replace(endpoint,"ws","http");
};
io_colyseus_Auth.__name__ = "io.colyseus.Auth";
io_colyseus_Auth.prototype = {
	hasToken: function() {
		return this.token != null;
	}
	,login: function() {
		var query = new haxe_ds_StringMap();
		this.request("POST","/auth",query);
	}
	,getDeviceId: function() {
		return "";
	}
	,getPlatform: function() {
		return "";
	}
	,request: function(method,segments,query,body) {
		if(query == null) {
			query = new haxe_ds_StringMap();
		}
		var queryString = [];
		var field = query.keys();
		while(field.hasNext()) {
			var field1 = field.next();
			queryString.push(field1 + "=" + (__map_reserved[field1] != null ? query.getReserved(field1) : query.h[field1]));
		}
		if(this.hasToken()) {
			var v = this.token;
			if(__map_reserved["token"] != null) {
				query.setReserved("token",v);
			} else {
				query.h["token"] = v;
			}
		}
		var req = new haxe_http_HttpJs(this.endpoint + segments + "?" + queryString.join("&"));
		var responseBytes = new haxe_io_BytesOutput();
		if(this.hasToken()) {
			req.setHeader("authorization","Bearer " + this.token);
		}
		if(body != null) {
			req.setPostData(body);
			req.setHeader("Content-Type","application/json");
		}
		req.setHeader("Accept","application/json");
		req.onData = function(json) {
			console.log("io/colyseus/Auth.hx:64:","RESPONSE:" + json);
		};
		req.onError = function(err) {
			console.log("io/colyseus/Auth.hx:68:","onError");
			console.log("io/colyseus/Auth.hx:69:",err);
		};
		req.setHeader("X-HTTP-Method-Override",method);
		req.request(true);
	}
	,__class__: io_colyseus_Auth
};
var io_colyseus_RoomAvailable = function() { };
io_colyseus_RoomAvailable.__name__ = "io.colyseus.RoomAvailable";
io_colyseus_RoomAvailable.__isInterface__ = true;
io_colyseus_RoomAvailable.prototype = {
	__class__: io_colyseus_RoomAvailable
};
var io_colyseus_DummyState = function() { };
io_colyseus_DummyState.__name__ = "io.colyseus.DummyState";
var io_colyseus_Client = function(endpoint) {
	this.endpoint = endpoint;
	this.auth = new io_colyseus_Auth(this.endpoint);
};
io_colyseus_Client.__name__ = "io.colyseus.Client";
io_colyseus_Client.prototype = {
	joinOrCreate_GState: function(roomName,options,stateClass,callback) {
		this.createMatchMakeRequest_joinOrCreate_T("joinOrCreate",roomName,options,stateClass,callback);
	}
	,joinOrCreate_State: function(roomName,options,stateClass,callback) {
		this.createMatchMakeRequest_joinOrCreate_T("joinOrCreate",roomName,options,stateClass,callback);
	}
	,createMatchMakeRequest_reconnect_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			var value = this.auth.token;
			if(__map_reserved["token"] != null) {
				options.setReserved("token",value);
			} else {
				options.h["token"] = value;
			}
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_joinById_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			var value = this.auth.token;
			if(__map_reserved["token"] != null) {
				options.setReserved("token",value);
			} else {
				options.h["token"] = value;
			}
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_join_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			var value = this.auth.token;
			if(__map_reserved["token"] != null) {
				options.setReserved("token",value);
			} else {
				options.h["token"] = value;
			}
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_create_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			var value = this.auth.token;
			if(__map_reserved["token"] != null) {
				options.setReserved("token",value);
			} else {
				options.h["token"] = value;
			}
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_joinOrCreate_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			var value = this.auth.token;
			if(__map_reserved["token"] != null) {
				options.setReserved("token",value);
			} else {
				options.h["token"] = value;
			}
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,consumeSeatReservation_createMatchMakeRequest_T: function(response,stateClass,callback) {
		var room = new io_colyseus_Room(response.room.name,stateClass);
		room.id = response.room.roomId;
		room.sessionId = response.sessionId;
		var onError = function(code,message) {
			callback(new io_colyseus_error_MatchMakeError(code,message),null);
		};
		var onJoin = function() {
			HxOverrides.remove(room.onError,onError);
			callback(null,room);
		};
		room.onError.push(onError);
		room.onJoin.push(onJoin);
		var tmp = Std.string(response.room.processId) + "/" + room.id;
		var _g = new haxe_ds_StringMap();
		var value = room.sessionId;
		if(__map_reserved["sessionId"] != null) {
			_g.setReserved("sessionId",value);
		} else {
			_g.h["sessionId"] = value;
		}
		var tmp1 = this.createConnection(tmp,_g);
		room.connect(tmp1);
	}
	,getAvailableRooms: function(roomName,callback) {
		this.request("GET","/matchmake/" + roomName,null,callback);
	}
	,createConnection: function(path,options) {
		if(path == null) {
			path = "";
		}
		var params = [];
		var name = options.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			params.push(name1 + "=" + Std.string(__map_reserved[name1] != null ? options.getReserved(name1) : options.h[name1]));
		}
		return new io_colyseus_Connection(this.endpoint + "/" + path + "?" + params.join("&"));
	}
	,request: function(method,segments,body,callback) {
		var req = new haxe_http_HttpJs("http" + this.endpoint.substring(2) + segments);
		if(body != null) {
			req.setPostData(body);
			req.setHeader("Content-Type","application/json");
		}
		req.setHeader("Accept","application/json");
		var responseStatus;
		req.onStatus = function(status) {
			responseStatus = status;
		};
		req.onData = function(json) {
			var response = JSON.parse(json);
			if(response.error) {
				var code = response.code;
				var message = response.error;
				callback(new io_colyseus_error_MatchMakeError(code,message),null);
			} else {
				callback(null,response);
			}
		};
		req.onError = function(err) {
			callback(new io_colyseus_error_MatchMakeError(0,err),null);
		};
		req.request(method == "POST");
	}
	,__class__: io_colyseus_Client
};
var io_colyseus_Connection = function(url) {
	this.reconnectionEnabled = false;
	var _gthis = this;
	this.ws = haxe_net_WebSocket.create(url);
	this.ws.onopen = function() {
		_gthis.onOpen();
	};
	this.ws.onmessageBytes = function(bytes) {
		_gthis.onMessage(bytes);
	};
	this.ws.onclose = function() {
		_gthis.onClose();
	};
	this.ws.onerror = function(message) {
		_gthis.onError(message);
	};
};
io_colyseus_Connection.__name__ = "io.colyseus.Connection";
io_colyseus_Connection.prototype = {
	onOpen: function() {
	}
	,onMessage: function(bytes) {
	}
	,onClose: function() {
	}
	,onError: function(message) {
	}
	,send: function(data) {
		this.ws.sendBytes(data);
		return;
	}
	,close: function() {
		this.ws.close();
	}
	,__class__: io_colyseus_Connection
};
var io_colyseus_Protocol = function() { };
io_colyseus_Protocol.__name__ = "io.colyseus.Protocol";
var io_colyseus_Room = function(name,cls) {
	this.serializer = null;
	this.serializerId = null;
	this.onMessageHandlers = new haxe_ds_StringMap();
	var this1 = [];
	this.onLeave = this1;
	var this11 = [];
	this.onError = this11;
	var this12 = [];
	this.onStateChange = this12;
	var this13 = [];
	this.onJoin = this13;
	this.id = null;
	this.name = name;
	this.tmpStateClass = cls;
};
io_colyseus_Room.__name__ = "io.colyseus.Room";
io_colyseus_Room.prototype = {
	connect: function(connection) {
		var _gthis = this;
		this.connection = connection;
		this.connection.reconnectionEnabled = false;
		this.connection.onMessage = function(bytes) {
			_gthis.onMessageCallback(bytes);
		};
		this.connection.onClose = function() {
			_gthis.teardown();
			var _g = 0;
			var _g1 = _gthis.onLeave;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn();
			}
		};
		this.connection.onError = function(e) {
			var _g2 = 0;
			var _g11 = _gthis.onError;
			while(_g2 < _g11.length) {
				var fn1 = _g11[_g2];
				++_g2;
				fn1(0,e);
			}
		};
	}
	,leave: function(consented) {
		if(consented == null) {
			consented = true;
		}
		this.teardown();
		if(this.connection != null) {
			if(consented) {
				var bytes = new haxe_io_BytesOutput();
				bytes.writeByte(io_colyseus_Protocol.LEAVE_ROOM);
				this.connection.send(bytes.getBytes());
			} else {
				this.connection.close();
			}
		} else {
			var _g = 0;
			var _g1 = this.onLeave;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn();
			}
		}
	}
	,send: function(type,message) {
		var bytesToSend = new haxe_io_BytesOutput();
		bytesToSend.writeByte(io_colyseus_Protocol.ROOM_DATA);
		if(typeof(type) == "string") {
			var encodedType = haxe_io_Bytes.ofString(type);
			bytesToSend.writeByte(encodedType.length | 160);
			bytesToSend.writeBytes(encodedType,0,encodedType.length);
		} else {
			bytesToSend.writeByte(type);
		}
		if(message != null) {
			var encodedMessage = new org_msgpack_Encoder(message).o.getBytes();
			bytesToSend.writeBytes(encodedMessage,0,encodedMessage.length);
		}
		this.connection.send(bytesToSend.getBytes());
	}
	,onMessage: function(type,callback) {
		var this1 = this.onMessageHandlers;
		var k = this.getMessageHandlerKey(type);
		var _this = this1;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,callback);
		} else {
			_this.h[k] = callback;
		}
		return this;
	}
	,get_state: function() {
		return this.serializer.getState();
	}
	,teardown: function() {
		if(this.serializer != null) {
			this.serializer.teardown();
		}
	}
	,onMessageCallback: function(data) {
		var code = data.b[0];
		var it = { offset : 1};
		if(code == io_colyseus_Protocol.JOIN_ROOM) {
			this.serializerId = data.getString(it.offset + 1,data.b[it.offset]);
			it.offset += this.serializerId.length + 1;
			if(this.serializerId == "schema") {
				this.serializer = new io_colyseus_serializer_SchemaSerializer(this.tmpStateClass);
			} else {
				throw new js__$Boot_HaxeError("FossilDelta serializer has been deprecated! Use SchemaSerializer instead.");
			}
			if(data.length > it.offset) {
				this.serializer.handshake(data,it.offset);
			}
			var _g = 0;
			var _g1 = this.onJoin;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn();
			}
			var bytes = new haxe_io_BytesOutput();
			bytes.writeByte(io_colyseus_Protocol.JOIN_ROOM);
			this.connection.send(bytes.getBytes());
		} else if(code == io_colyseus_Protocol.ERROR) {
			var errorCode = io_colyseus_serializer_schema_Schema.decoder.number(data,it);
			var message = io_colyseus_serializer_schema_Schema.decoder.string(data,it);
			console.log("io/colyseus/Room.hx:150:","Room error: code => " + errorCode + ", message => " + message);
			var _g2 = 0;
			var _g11 = this.onError;
			while(_g2 < _g11.length) {
				var fn1 = _g11[_g2];
				++_g2;
				fn1(errorCode,message);
			}
		} else if(code == io_colyseus_Protocol.LEAVE_ROOM) {
			this.leave();
		} else if(code == io_colyseus_Protocol.ROOM_STATE) {
			this.setState(data.sub(it.offset,data.length - 1));
		} else if(code == io_colyseus_Protocol.ROOM_STATE_PATCH) {
			this.patch(data.sub(it.offset,data.length - 1));
		} else if(code == io_colyseus_Protocol.ROOM_DATA) {
			var type = io_colyseus_serializer_schema_SPEC.stringCheck(data,it) ? io_colyseus_serializer_schema_Schema.decoder.string(data,it) : io_colyseus_serializer_schema_Schema.decoder.number(data,it);
			var message1;
			if(data.length > it.offset) {
				var b = data.sub(it.offset,data.length - it.offset);
				var option = null;
				if(option == null) {
					option = org_msgpack_DecodeOption.AsObject;
				}
				message1 = new org_msgpack_Decoder(b,option).o;
			} else {
				message1 = null;
			}
			this.dispatchMessage(type,message1);
		}
	}
	,setState: function(encodedState) {
		this.serializer.setState(encodedState);
		var e = this.onStateChange;
		var arg = this.serializer.getState();
		var _g = 0;
		var _g1 = e;
		while(_g < _g1.length) {
			var fn = _g1[_g];
			++_g;
			fn(arg);
		}
	}
	,patch: function(binaryPatch) {
		this.serializer.patch(binaryPatch);
		var e = this.onStateChange;
		var arg = this.serializer.getState();
		var _g = 0;
		var _g1 = e;
		while(_g < _g1.length) {
			var fn = _g1[_g];
			++_g;
			fn(arg);
		}
	}
	,dispatchMessage: function(type,message) {
		var messageType = this.getMessageHandlerKey(type);
		var _this = this.onMessageHandlers;
		if((__map_reserved[messageType] != null ? _this.getReserved(messageType) : _this.h[messageType]) != null) {
			var _this1 = this.onMessageHandlers;
			(__map_reserved[messageType] != null ? _this1.getReserved(messageType) : _this1.h[messageType])(message);
		} else {
			console.log("io/colyseus/Room.hx:195:","onMessage not registered for type " + Std.string(type));
		}
	}
	,getMessageHandlerKey: function(type) {
		if(typeof(type) == "string") {
			return type;
		} else if(typeof(type) == "number" && ((type | 0) === type)) {
			return "i" + Std.string(type);
		} else {
			var c = js_Boot.getClass(type);
			return "$" + c.__name__;
		}
	}
	,__class__: io_colyseus_Room
	,__properties__: {get_state:"get_state"}
};
var io_colyseus_error_MatchMakeError = function(code,message) {
	this.code = code;
	this.message = message;
};
io_colyseus_error_MatchMakeError.__name__ = "io.colyseus.error.MatchMakeError";
io_colyseus_error_MatchMakeError.prototype = {
	__class__: io_colyseus_error_MatchMakeError
};
var io_colyseus_events__$EventHandler_EventHandler_$Impl_$ = {};
io_colyseus_events__$EventHandler_EventHandler_$Impl_$.__name__ = "io.colyseus.events._EventHandler.EventHandler_Impl_";
io_colyseus_events__$EventHandler_EventHandler_$Impl_$.__properties__ = {get_handlers:"get_handlers"};
io_colyseus_events__$EventHandler_EventHandler_$Impl_$.get_handlers = function(this1) {
	return this1;
};
io_colyseus_events__$EventHandler_EventHandler_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
io_colyseus_events__$EventHandler_EventHandler_$Impl_$.add = function(this1,fn) {
	this1.push(fn);
};
io_colyseus_events__$EventHandler_EventHandler_$Impl_$.remove = function(this1,fn) {
	HxOverrides.remove(this1,fn);
};
var io_colyseus_events_EventHandlerDispatcher0 = function() { };
io_colyseus_events_EventHandlerDispatcher0.__name__ = "io.colyseus.events.EventHandlerDispatcher0";
io_colyseus_events_EventHandlerDispatcher0.dispatch = function(e) {
	var _g = 0;
	var _g1 = e;
	while(_g < _g1.length) {
		var fn = _g1[_g];
		++_g;
		fn();
	}
};
var io_colyseus_events_EventHandlerDispatcher1 = function() { };
io_colyseus_events_EventHandlerDispatcher1.__name__ = "io.colyseus.events.EventHandlerDispatcher1";
io_colyseus_events_EventHandlerDispatcher1.dispatch = function(e,arg) {
	var _g = 0;
	var _g1 = e;
	while(_g < _g1.length) {
		var fn = _g1[_g];
		++_g;
		fn(arg);
	}
};
var io_colyseus_events_EventHandlerDispatcher2 = function() { };
io_colyseus_events_EventHandlerDispatcher2.__name__ = "io.colyseus.events.EventHandlerDispatcher2";
io_colyseus_events_EventHandlerDispatcher2.dispatch = function(e,arg1,arg2) {
	var _g = 0;
	var _g1 = e;
	while(_g < _g1.length) {
		var fn = _g1[_g];
		++_g;
		fn(arg1,arg2);
	}
};
var io_colyseus_serializer_Serializer = function() { };
io_colyseus_serializer_Serializer.__name__ = "io.colyseus.serializer.Serializer";
io_colyseus_serializer_Serializer.__isInterface__ = true;
io_colyseus_serializer_Serializer.prototype = {
	__class__: io_colyseus_serializer_Serializer
};
var io_colyseus_serializer_SchemaSerializer = function(cl) {
	this.state = Type.createInstance(cl,[]);
};
io_colyseus_serializer_SchemaSerializer.__name__ = "io.colyseus.serializer.SchemaSerializer";
io_colyseus_serializer_SchemaSerializer.__interfaces__ = [io_colyseus_serializer_Serializer];
io_colyseus_serializer_SchemaSerializer.prototype = {
	setState: function(data) {
		(js_Boot.__cast(this.state , io_colyseus_serializer_schema_Schema)).decode(data);
	}
	,getState: function() {
		return this.state;
	}
	,patch: function(data) {
		(js_Boot.__cast(this.state , io_colyseus_serializer_schema_Schema)).decode(data);
	}
	,teardown: function() {
	}
	,handshake: function(bytes,offset) {
	}
	,__class__: io_colyseus_serializer_SchemaSerializer
};
var io_colyseus_serializer_schema_ArraySchema_$Bool = function() {
	this.items = [];
};
io_colyseus_serializer_schema_ArraySchema_$Bool.__name__ = "io.colyseus.serializer.schema.ArraySchema_Bool";
io_colyseus_serializer_schema_ArraySchema_$Bool.prototype = {
	get_length: function() {
		return this.items.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_ArraySchema_$Bool();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return HxOverrides.iter(this.items);
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			data.push("" + (item == null ? "null" : "" + item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_ArraySchema_$Bool
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_ArraySchema_$Dynamic = function() {
	this.items = [];
};
io_colyseus_serializer_schema_ArraySchema_$Dynamic.__name__ = "io.colyseus.serializer.schema.ArraySchema_Dynamic";
io_colyseus_serializer_schema_ArraySchema_$Dynamic.prototype = {
	get_length: function() {
		return this.items.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_ArraySchema_$Dynamic();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return HxOverrides.iter(this.items);
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_ArraySchema_$Dynamic
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_ArraySchema_$String = function() {
	this.items = [];
};
io_colyseus_serializer_schema_ArraySchema_$String.__name__ = "io.colyseus.serializer.schema.ArraySchema_String";
io_colyseus_serializer_schema_ArraySchema_$String.prototype = {
	get_length: function() {
		return this.items.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_ArraySchema_$String();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return HxOverrides.iter(this.items);
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			data.push("" + (item == null ? "null" : "" + item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_ArraySchema_$String
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_ArraySchema_$SubSystem = function() {
	this.items = [];
};
io_colyseus_serializer_schema_ArraySchema_$SubSystem.__name__ = "io.colyseus.serializer.schema.ArraySchema_SubSystem";
io_colyseus_serializer_schema_ArraySchema_$SubSystem.prototype = {
	get_length: function() {
		return this.items.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_ArraySchema_$SubSystem();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return HxOverrides.iter(this.items);
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_ArraySchema_$SubSystem
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField = function() {
	this.items = [];
};
io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField.__name__ = "io.colyseus.serializer.schema.ArraySchema_io_colyseus_serializer_schema_ReflectionField";
io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField.prototype = {
	get_length: function() {
		return this.items.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return HxOverrides.iter(this.items);
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType = function() {
	this.items = [];
};
io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType.__name__ = "io.colyseus.serializer.schema.ArraySchema_io_colyseus_serializer_schema_ReflectionType";
io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType.prototype = {
	get_length: function() {
		return this.items.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return HxOverrides.iter(this.items);
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_MapSchema_$Dynamic = function() {
	this.items = new io_colyseus_serializer_schema_OrderedMap(new haxe_ds_StringMap());
};
io_colyseus_serializer_schema_MapSchema_$Dynamic.__name__ = "io.colyseus.serializer.schema.MapSchema_Dynamic";
io_colyseus_serializer_schema_MapSchema_$Dynamic.prototype = {
	get_length: function() {
		return this.items._keys.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_MapSchema_$Dynamic();
		var key = HxOverrides.iter(this.items._keys);
		while(key.hasNext()) {
			var key1 = key.next();
			cloned.items.set(key1,this.items.get(key1));
		}
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return this.items.iterator();
	}
	,get: function(key) {
		return this.items.get(key);
	}
	,arrayWrite: function(key,value) {
		this.items.set(key,value);
		return value;
	}
	,toString: function() {
		var data = [];
		var key = HxOverrides.iter(this.items._keys);
		while(key.hasNext()) {
			var key1 = key.next();
			data.push(key1 + " => " + Std.string(this.items.get(key1)));
		}
		return "MapSchema (" + Lambda.count(this.items) + ") { " + data.join(", ") + " }";
	}
	,__class__: io_colyseus_serializer_schema_MapSchema_$Dynamic
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_MapSchema_$Player = function() {
	this.items = new io_colyseus_serializer_schema_OrderedMap(new haxe_ds_StringMap());
};
io_colyseus_serializer_schema_MapSchema_$Player.__name__ = "io.colyseus.serializer.schema.MapSchema_Player";
io_colyseus_serializer_schema_MapSchema_$Player.prototype = {
	get_length: function() {
		return this.items._keys.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_MapSchema_$Player();
		var key = HxOverrides.iter(this.items._keys);
		while(key.hasNext()) {
			var key1 = key.next();
			cloned.items.set(key1,this.items.get(key1));
		}
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return this.items.iterator();
	}
	,get: function(key) {
		return this.items.get(key);
	}
	,arrayWrite: function(key,value) {
		this.items.set(key,value);
		return value;
	}
	,toString: function() {
		var data = [];
		var key = HxOverrides.iter(this.items._keys);
		while(key.hasNext()) {
			var key1 = key.next();
			data.push(key1 + " => " + Std.string(this.items.get(key1)));
		}
		return "MapSchema (" + Lambda.count(this.items) + ") { " + data.join(", ") + " }";
	}
	,__class__: io_colyseus_serializer_schema_MapSchema_$Player
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_Decorator = function() { };
io_colyseus_serializer_schema_Decorator.__name__ = "io.colyseus.serializer.schema.Decorator";
var io_colyseus_serializer_schema_SPEC = function() { };
io_colyseus_serializer_schema_SPEC.__name__ = "io.colyseus.serializer.schema.SPEC";
io_colyseus_serializer_schema_SPEC.numberCheck = function(bytes,it) {
	var prefix = bytes.b[it.offset];
	if(prefix >= 128) {
		if(prefix >= 202) {
			return prefix <= 211;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
io_colyseus_serializer_schema_SPEC.arrayCheck = function(bytes,it) {
	return bytes.b[it.offset] < 160;
};
io_colyseus_serializer_schema_SPEC.nilCheck = function(bytes,it) {
	return bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.NIL;
};
io_colyseus_serializer_schema_SPEC.indexChangeCheck = function(bytes,it) {
	return bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.INDEX_CHANGE;
};
io_colyseus_serializer_schema_SPEC.stringCheck = function(bytes,it) {
	var prefix = bytes.get(it.offset);
	if(!(prefix < 192 && prefix > 160 || prefix == 217 || prefix == 218)) {
		return prefix == 219;
	} else {
		return true;
	}
};
var io_colyseus_serializer_schema_ArraySchema = function() {
	this.items = [];
};
io_colyseus_serializer_schema_ArraySchema.__name__ = "io.colyseus.serializer.schema.ArraySchema";
io_colyseus_serializer_schema_ArraySchema.prototype = {
	get_length: function() {
		return this.items.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_ArraySchema();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return HxOverrides.iter(this.items);
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_ArraySchema
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_OrderedMapIterator = function(omap) {
	this.index = 0;
	this.map = omap;
};
io_colyseus_serializer_schema_OrderedMapIterator.__name__ = "io.colyseus.serializer.schema.OrderedMapIterator";
io_colyseus_serializer_schema_OrderedMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.map._keys.length;
	}
	,next: function() {
		return this.map.get(this.map._keys[this.index++]);
	}
	,__class__: io_colyseus_serializer_schema_OrderedMapIterator
};
var io_colyseus_serializer_schema_OrderedMap = function(_map) {
	this.idx = 0;
	this._keys = [];
	this.map = _map;
};
io_colyseus_serializer_schema_OrderedMap.__name__ = "io.colyseus.serializer.schema.OrderedMap";
io_colyseus_serializer_schema_OrderedMap.prototype = {
	set: function(key,value) {
		if(!this.map.exists(key)) {
			this._keys.push(key);
		}
		this.map.set(key,value);
	}
	,toString: function() {
		var _ret = "";
		var _cnt = 0;
		var _len = this._keys.length;
		var _g = 0;
		var _g1 = this._keys;
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			_ret += "" + Std.string(k) + " => " + Std.string(this.map.get(k)) + (_cnt++ < _len - 1 ? ", " : "");
		}
		return "{" + _ret + "}";
	}
	,iterator: function() {
		return new io_colyseus_serializer_schema_OrderedMapIterator(this);
	}
	,remove: function(key) {
		if(this.map.remove(key)) {
			return HxOverrides.remove(this._keys,key);
		} else {
			return false;
		}
	}
	,exists: function(key) {
		return this.map.exists(key);
	}
	,get: function(key) {
		return this.map.get(key);
	}
	,keys: function() {
		return HxOverrides.iter(this._keys);
	}
	,__class__: io_colyseus_serializer_schema_OrderedMap
};
var io_colyseus_serializer_schema_MapSchema = function() {
	this.items = new io_colyseus_serializer_schema_OrderedMap(new haxe_ds_StringMap());
};
io_colyseus_serializer_schema_MapSchema.__name__ = "io.colyseus.serializer.schema.MapSchema";
io_colyseus_serializer_schema_MapSchema.prototype = {
	get_length: function() {
		return this.items._keys.length;
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_MapSchema();
		var key = HxOverrides.iter(this.items._keys);
		while(key.hasNext()) {
			var key1 = key.next();
			cloned.items.set(key1,this.items.get(key1));
		}
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return this.items.iterator();
	}
	,get: function(key) {
		return this.items.get(key);
	}
	,arrayWrite: function(key,value) {
		this.items.set(key,value);
		return value;
	}
	,toString: function() {
		var data = [];
		var key = HxOverrides.iter(this.items._keys);
		while(key.hasNext()) {
			var key1 = key.next();
			data.push(key1 + " => " + Std.string(this.items.get(key1)));
		}
		return "MapSchema (" + Lambda.count(this.items) + ") { " + data.join(", ") + " }";
	}
	,__class__: io_colyseus_serializer_schema_MapSchema
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_Context = function() {
	this.schemas = [];
	this.typeIds = new haxe_ds_IntMap();
};
io_colyseus_serializer_schema_Context.__name__ = "io.colyseus.serializer.schema.Context";
io_colyseus_serializer_schema_Context.prototype = {
	add: function(schema,typeid) {
		if(typeid == null) {
			typeid = this.schemas.length;
		}
		this.typeIds.h[typeid] = schema;
		this.schemas.push(schema);
	}
	,get: function(typeid) {
		return this.typeIds.h[typeid];
	}
	,__class__: io_colyseus_serializer_schema_Context
};
var io_colyseus_serializer_schema_ReflectionField = function() {
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "name";
	this._types.h[0] = "string";
	this._indexes.h[1] = "type";
	this._types.h[1] = "string";
	this._indexes.h[2] = "referencedType";
	this._types.h[2] = "uint8";
};
io_colyseus_serializer_schema_ReflectionField.__name__ = "io.colyseus.serializer.schema.ReflectionField";
io_colyseus_serializer_schema_ReflectionField.__super__ = io_colyseus_serializer_schema_Schema;
io_colyseus_serializer_schema_ReflectionField.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	__class__: io_colyseus_serializer_schema_ReflectionField
});
var io_colyseus_serializer_schema_ReflectionType = function() {
	this.fields = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField();
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "id";
	this._types.h[0] = "uint8";
	this._indexes.h[1] = "fields";
	this._types.h[1] = "array";
	this._childSchemaTypes.h[1] = io_colyseus_serializer_schema_ReflectionField;
};
io_colyseus_serializer_schema_ReflectionType.__name__ = "io.colyseus.serializer.schema.ReflectionType";
io_colyseus_serializer_schema_ReflectionType.__super__ = io_colyseus_serializer_schema_Schema;
io_colyseus_serializer_schema_ReflectionType.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	__class__: io_colyseus_serializer_schema_ReflectionType
});
var io_colyseus_serializer_schema_Reflection = function() {
	this.types = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType();
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "types";
	this._types.h[0] = "array";
	this._childSchemaTypes.h[0] = io_colyseus_serializer_schema_ReflectionType;
	this._indexes.h[1] = "rootType";
	this._types.h[1] = "uint8";
};
io_colyseus_serializer_schema_Reflection.__name__ = "io.colyseus.serializer.schema.Reflection";
io_colyseus_serializer_schema_Reflection.__super__ = io_colyseus_serializer_schema_Schema;
io_colyseus_serializer_schema_Reflection.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	__class__: io_colyseus_serializer_schema_Reflection
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = "js.Browser";
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var org_msgpack_DecodeOption = $hxEnums["org.msgpack.DecodeOption"] = { __ename__ : true, __constructs__ : ["AsMap","AsObject"]
	,AsMap: {_hx_index:0,__enum__:"org.msgpack.DecodeOption",toString:$estr}
	,AsObject: {_hx_index:1,__enum__:"org.msgpack.DecodeOption",toString:$estr}
};
var org_msgpack__$Decoder_Pair = function(k,v) {
	this.k = k;
	this.v = v;
};
org_msgpack__$Decoder_Pair.__name__ = "org.msgpack._Decoder.Pair";
org_msgpack__$Decoder_Pair.prototype = {
	__class__: org_msgpack__$Decoder_Pair
};
var org_msgpack_Decoder = function(b,option) {
	var i = new haxe_io_BytesInput(b);
	i.set_bigEndian(true);
	this.o = this.decode(i,option);
};
org_msgpack_Decoder.__name__ = "org.msgpack.Decoder";
org_msgpack_Decoder.prototype = {
	decode: function(i,option) {
		try {
			var b = i.readByte();
			switch(b) {
			case 192:
				return null;
			case 194:
				return false;
			case 195:
				return true;
			case 196:
				return i.read(i.readByte());
			case 197:
				return i.read(i.readUInt16());
			case 198:
				return i.read(i.readInt32());
			case 202:
				return i.readFloat();
			case 203:
				return i.readDouble();
			case 204:
				return i.readByte();
			case 205:
				return i.readUInt16();
			case 206:
				return i.readInt32();
			case 207:
				return this.readUInt64(i);
			case 208:
				return i.readInt8();
			case 209:
				return i.readInt16();
			case 210:
				return i.readInt32();
			case 211:
				return this.readInt64(i);
			case 217:
				return i.readString(i.readByte());
			case 218:
				return i.readString(i.readUInt16());
			case 219:
				return i.readString(i.readInt32());
			case 220:
				return this.readArray(i,i.readUInt16(),option);
			case 221:
				return this.readArray(i,i.readInt32(),option);
			case 222:
				return this.readMap(i,i.readUInt16(),option);
			case 223:
				return this.readMap(i,i.readInt32(),option);
			default:
				if(b < 128) {
					return b;
				} else if(b < 144) {
					return this.readMap(i,15 & b,option);
				} else if(b < 160) {
					return this.readArray(i,15 & b,option);
				} else if(b < 192) {
					return i.readString(31 & b);
				} else if(b > 223) {
					return -256 | b;
				}
			}
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
			} else {
				throw e;
			}
		}
		return null;
	}
	,readInt64: function(i) {
		var high = i.readInt32();
		var low = i.readInt32();
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	,readUInt64: function(i) {
		var high = i.readInt32() * Math.pow(2,32);
		var low = i.readInt32();
		return high + low;
	}
	,readArray: function(i,length,option) {
		var a = [];
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var x = _g++;
			a.push(this.decode(i,option));
		}
		return a;
	}
	,readMap: function(i,length,option) {
		switch(option._hx_index) {
		case 0:
			var pairs = [];
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var n = _g++;
				var k = this.decode(i,option);
				var v = this.decode(i,option);
				pairs.push(new org_msgpack__$Decoder_Pair(k,v));
			}
			if(pairs.length == 0) {
				return new haxe_ds_StringMap();
			}
			var _g2 = Type.typeof(pairs[0].k);
			switch(_g2._hx_index) {
			case 1:
				var out = new haxe_ds_IntMap();
				var _g21 = 0;
				while(_g21 < pairs.length) {
					var p = pairs[_g21];
					++_g21;
					if(Type.typeof(p.k)._hx_index != 1) {
						throw new js__$Boot_HaxeError("Error: Mixed key type when decoding IntMap");
					}
					if(out.h.hasOwnProperty(p.k)) {
						throw new js__$Boot_HaxeError("Error: Duplicate keys found => " + Std.string(p.k));
					}
					out.h[p.k] = p.v;
				}
				return out;
			case 6:
				var c = _g2.c;
				if(c.__name__ == "String") {
					var out1 = new haxe_ds_StringMap();
					var _g22 = 0;
					while(_g22 < pairs.length) {
						var p1 = pairs[_g22];
						++_g22;
						var _g23 = Type.typeof(p1.k);
						if(_g23._hx_index == 6) {
							var c1 = _g23.c;
							if(c1.__name__ != "String") {
								throw new js__$Boot_HaxeError("Error: Mixed key type when decoding StringMap");
							}
						} else {
							throw new js__$Boot_HaxeError("Error: Mixed key type when decoding StringMap");
						}
						var key = p1.k;
						if(__map_reserved[key] != null ? out1.existsReserved(key) : out1.h.hasOwnProperty(key)) {
							throw new js__$Boot_HaxeError("Error: Duplicate keys found => " + Std.string(p1.k));
						}
						var key1 = p1.k;
						var value = p1.v;
						if(__map_reserved[key1] != null) {
							out1.setReserved(key1,value);
						} else {
							out1.h[key1] = value;
						}
					}
					return out1;
				} else {
					throw new js__$Boot_HaxeError("Error: Unsupported key Type");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Error: Unsupported key Type");
			}
			break;
		case 1:
			var out2 = { };
			var _g3 = 0;
			var _g11 = length;
			while(_g3 < _g11) {
				var n1 = _g3++;
				var k1 = this.decode(i,option);
				var v1 = this.decode(i,option);
				out2[Std.string(k1)] = v1;
			}
			return out2;
		}
	}
	,getResult: function() {
		return this.o;
	}
	,__class__: org_msgpack_Decoder
};
var org_msgpack_Encoder = function(d) {
	this.o = new haxe_io_BytesOutput();
	this.o.set_bigEndian(true);
	this.encode(d);
};
org_msgpack_Encoder.__name__ = "org.msgpack.Encoder";
org_msgpack_Encoder.prototype = {
	encode: function(d) {
		var _g = Type.typeof(d);
		switch(_g._hx_index) {
		case 0:
			this.o.writeByte(192);
			break;
		case 1:
			var d1 = d;
			if(d1 < -32) {
				if(d1 < -32768) {
					this.o.writeByte(210);
					this.o.writeInt32(d1);
				} else if(d1 < -128) {
					this.o.writeByte(209);
					this.o.writeInt16(d1);
				} else {
					this.o.writeByte(208);
					this.o.writeInt8(d1);
				}
			} else if(d1 < 128) {
				this.o.writeByte(d1 & 255);
			} else if(d1 < 256) {
				this.o.writeByte(204);
				this.o.writeByte(d1);
			} else if(d1 < 65536) {
				this.o.writeByte(205);
				this.o.writeUInt16(d1);
			} else {
				this.o.writeByte(206);
				this.o.writeInt32(d1);
			}
			break;
		case 2:
			var d2 = d;
			var a = Math.abs(d2);
			if(a > 1.40129846432481707e-45 && a < 3.40282346638528860e+38) {
				this.o.writeByte(202);
				this.o.writeFloat(d2);
			} else {
				this.o.writeByte(203);
				this.o.writeDouble(d2);
			}
			break;
		case 3:
			this.o.writeByte(d ? 195 : 194);
			break;
		case 4:
			var f = Reflect.fields(d);
			var length = Lambda.count(f);
			if(length < 16) {
				this.o.writeByte(128 | length);
			} else if(length < 65536) {
				this.o.writeByte(222);
				this.o.writeUInt16(length);
			} else {
				this.o.writeByte(223);
				this.o.writeInt32(length);
			}
			var _g1 = 0;
			while(_g1 < f.length) {
				var k = f[_g1];
				++_g1;
				this.encode(k);
				this.encode(Reflect.field(d,k));
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Error: Function not supported");
		case 6:
			var c = _g.c;
			switch(c.__name__) {
			case "Array":
				var d3 = d;
				var length1 = d3.length;
				if(length1 < 16) {
					this.o.writeByte(144 | length1);
				} else if(length1 < 65536) {
					this.o.writeByte(220);
					this.o.writeUInt16(length1);
				} else {
					this.o.writeByte(221);
					this.o.writeInt32(length1);
				}
				var _g2 = 0;
				while(_g2 < d3.length) {
					var e = d3[_g2];
					++_g2;
					this.encode(e);
				}
				break;
			case "String":
				var b = d;
				var length2 = b.length;
				if(length2 < 32) {
					this.o.writeByte(160 | length2);
				} else if(length2 < 256) {
					this.o.writeByte(217);
					this.o.writeByte(length2);
				} else if(length2 < 65536) {
					this.o.writeByte(218);
					this.o.writeUInt16(length2);
				} else {
					this.o.writeByte(219);
					this.o.writeInt32(length2);
				}
				this.o.writeString(b);
				break;
			case "haxe._Int64.___Int64":
				var d4 = d;
				this.o.writeByte(211);
				this.o.writeInt32(d4.high);
				this.o.writeInt32(d4.low);
				break;
			case "haxe.ds.IntMap":case "haxe.ds.StringMap":case "haxe.ds.UnsafeStringMap":
				var d5 = d;
				var length3 = 0;
				var k1 = d5.keys();
				while(k1.hasNext()) {
					var k2 = k1.next();
					++length3;
				}
				if(length3 < 16) {
					this.o.writeByte(128 | length3);
				} else if(length3 < 65536) {
					this.o.writeByte(222);
					this.o.writeUInt16(length3);
				} else {
					this.o.writeByte(223);
					this.o.writeInt32(length3);
				}
				var k3 = d5.keys();
				while(k3.hasNext()) {
					var k4 = k3.next();
					this.encode(k4);
					this.encode(d5.get(k4));
				}
				break;
			case "haxe.io.Bytes":
				var b1 = d;
				var length4 = b1.length;
				if(length4 < 256) {
					this.o.writeByte(196);
					this.o.writeByte(length4);
				} else if(length4 < 65536) {
					this.o.writeByte(197);
					this.o.writeUInt16(length4);
				} else {
					this.o.writeByte(198);
					this.o.writeInt32(length4);
				}
				this.o.write(b1);
				break;
			default:
				throw new js__$Boot_HaxeError("Error: " + c.__name__ + " not supported");
			}
			break;
		case 7:
			var e1 = _g.e;
			throw new js__$Boot_HaxeError("Error: Enum not supported");
		case 8:
			throw new js__$Boot_HaxeError("Error: Unknown Data Type");
		}
	}
	,writeInt64: function(d) {
		this.o.writeByte(211);
		this.o.writeInt32(d.high);
		this.o.writeInt32(d.low);
	}
	,writeInt: function(d) {
		if(d < -32) {
			if(d < -32768) {
				this.o.writeByte(210);
				this.o.writeInt32(d);
			} else if(d < -128) {
				this.o.writeByte(209);
				this.o.writeInt16(d);
			} else {
				this.o.writeByte(208);
				this.o.writeInt8(d);
			}
		} else if(d < 128) {
			this.o.writeByte(d & 255);
		} else if(d < 256) {
			this.o.writeByte(204);
			this.o.writeByte(d);
		} else if(d < 65536) {
			this.o.writeByte(205);
			this.o.writeUInt16(d);
		} else {
			this.o.writeByte(206);
			this.o.writeInt32(d);
		}
	}
	,writeFloat: function(d) {
		var a = Math.abs(d);
		if(a > 1.40129846432481707e-45 && a < 3.40282346638528860e+38) {
			this.o.writeByte(202);
			this.o.writeFloat(d);
		} else {
			this.o.writeByte(203);
			this.o.writeDouble(d);
		}
	}
	,writeBinary: function(b) {
		var length = b.length;
		if(length < 256) {
			this.o.writeByte(196);
			this.o.writeByte(length);
		} else if(length < 65536) {
			this.o.writeByte(197);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(198);
			this.o.writeInt32(length);
		}
		this.o.write(b);
	}
	,writeString: function(b) {
		var length = b.length;
		if(length < 32) {
			this.o.writeByte(160 | length);
		} else if(length < 256) {
			this.o.writeByte(217);
			this.o.writeByte(length);
		} else if(length < 65536) {
			this.o.writeByte(218);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(219);
			this.o.writeInt32(length);
		}
		this.o.writeString(b);
	}
	,writeArray: function(d) {
		var length = d.length;
		if(length < 16) {
			this.o.writeByte(144 | length);
		} else if(length < 65536) {
			this.o.writeByte(220);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(221);
			this.o.writeInt32(length);
		}
		var _g = 0;
		while(_g < d.length) {
			var e = d[_g];
			++_g;
			this.encode(e);
		}
	}
	,writeMapLength: function(length) {
		if(length < 16) {
			this.o.writeByte(128 | length);
		} else if(length < 65536) {
			this.o.writeByte(222);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(223);
			this.o.writeInt32(length);
		}
	}
	,writeMap: function(d) {
		var length = 0;
		var k = d.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			++length;
		}
		if(length < 16) {
			this.o.writeByte(128 | length);
		} else if(length < 65536) {
			this.o.writeByte(222);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(223);
			this.o.writeInt32(length);
		}
		var k2 = d.keys();
		while(k2.hasNext()) {
			var k3 = k2.next();
			this.encode(k3);
			this.encode(d.get(k3));
		}
	}
	,writeObject: function(d) {
		var f = Reflect.fields(d);
		var length = Lambda.count(f);
		if(length < 16) {
			this.o.writeByte(128 | length);
		} else if(length < 65536) {
			this.o.writeByte(222);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(223);
			this.o.writeInt32(length);
		}
		var _g = 0;
		while(_g < f.length) {
			var k = f[_g];
			++_g;
			this.encode(k);
			this.encode(Reflect.field(d,k));
		}
	}
	,getBytes: function() {
		return this.o.getBytes();
	}
	,__class__: org_msgpack_Encoder
};
var org_msgpack_MsgPack = function() { };
org_msgpack_MsgPack.__name__ = "org.msgpack.MsgPack";
org_msgpack_MsgPack.encode = function(d) {
	return new org_msgpack_Encoder(d).o.getBytes();
};
org_msgpack_MsgPack.decode = function(b,option) {
	if(option == null) {
		option = org_msgpack_DecodeOption.AsObject;
	}
	return new org_msgpack_Decoder(b,option).o;
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
io_colyseus_serializer_schema_Schema.decoder = new io_colyseus_serializer_schema_Decoder();
GState.SERVER_CREATED = "SERVER_CREATED";
GState.CREATE_SERVER = "createServer";
GState.SET_PLAYER_SCENE = "setPlayerScene";
GState.SET_SCENE = "setScene";
GState.SET_TUT_STEP = "setTutStep";
GState.SET_TIMER = "setTimer";
GState.PAUSE = "pause";
GState.UNPAUSE = "unpause";
GState.FIREWALLS_UP = "disableFirewalls";
GState.FIREWALLS_DOWN = "enableFirewalls";
GState.KICK = "kick";
GState.GM_OWN = "gmOwn";
GState.GM_RESET = "gmReset";
State.ALIAS_ENTERED = "ALIAS_ENTERED";
State.SET_ALIAS_STATS = "setAliasAndStats";
State.HACK_ATTEMPT = "hackAttempt";
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
io_colyseus_Connection.isRunnerInitialized = false;
io_colyseus_Protocol.USER_ID = 1;
io_colyseus_Protocol.JOIN_REQUEST = 9;
io_colyseus_Protocol.JOIN_ROOM = 10;
io_colyseus_Protocol.ERROR = 11;
io_colyseus_Protocol.LEAVE_ROOM = 12;
io_colyseus_Protocol.ROOM_DATA = 13;
io_colyseus_Protocol.ROOM_STATE = 14;
io_colyseus_Protocol.ROOM_STATE_PATCH = 15;
io_colyseus_Protocol.ROOM_LIST = 20;
io_colyseus_Protocol.BAD_REQUEST = 50;
io_colyseus_serializer_schema_SPEC.END_OF_STRUCTURE = 193;
io_colyseus_serializer_schema_SPEC.NIL = 192;
io_colyseus_serializer_schema_SPEC.INDEX_CHANGE = 212;
org_msgpack_Encoder.FLOAT_SINGLE_MIN = 1.40129846432481707e-45;
org_msgpack_Encoder.FLOAT_SINGLE_MAX = 3.40282346638528860e+38;
org_msgpack_Encoder.FLOAT_DOUBLE_MIN = 4.94065645841246544e-324;
org_msgpack_Encoder.FLOAT_DOUBLE_MAX = 1.79769313486231570e+308;
GMain.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=gm.js.map